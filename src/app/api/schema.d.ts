/**
 * Copyright 2024 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/artifacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at" | "type" | "name";
                    search?: string | null;
                    type?: "app"[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                created_at: number;
                                description: string | null;
                                id: string;
                                message_id: string | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                name: string;
                                /** @enum {unknown} */
                                object: "artifact";
                                share_url: string | null;
                                source_code?: string;
                                thread_id: string | null;
                                /** @enum {unknown} */
                                type: "app";
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        description?: string;
                        message_id: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name: string;
                        shared?: boolean;
                        source_code: string;
                        /** @enum {string} */
                        type: "app";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            description: string | null;
                            id: string;
                            message_id: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            name: string;
                            /** @enum {unknown} */
                            object: "artifact";
                            share_url: string | null;
                            source_code?: string;
                            thread_id: string | null;
                            /** @enum {unknown} */
                            type: "app";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/artifacts/{artifact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    artifact_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            description: string | null;
                            id: string;
                            message_id: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            name: string;
                            /** @enum {unknown} */
                            object: "artifact";
                            share_url: string | null;
                            source_code?: string;
                            thread_id: string | null;
                            /** @enum {unknown} */
                            type: "app";
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    artifact_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        description?: string;
                        message_id?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        shared?: boolean;
                        source_code?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            description: string | null;
                            id: string;
                            message_id: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            name: string;
                            /** @enum {unknown} */
                            object: "artifact";
                            share_url: string | null;
                            source_code?: string;
                            thread_id: string | null;
                            /** @enum {unknown} */
                            type: "app";
                        };
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    artifact_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "artifact.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/artifacts/{artifact_id}/shared": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    secret: string;
                };
                header?: never;
                path: {
                    artifact_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            description: string | null;
                            id: string;
                            metadata: {
                                [key: string]: string;
                            };
                            name: string;
                            /** @enum {unknown} */
                            object: "artifact.shared";
                            source_code?: string;
                            /** @enum {unknown} */
                            type: "app";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/assistants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    agent?: "bee" | "streamlit";
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at" | "name";
                    public?: boolean;
                    search?: string | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                /** @enum {string} */
                                agent: "bee" | "streamlit";
                                created_at: number;
                                description: string | null;
                                id: string;
                                instructions: string | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                model: string;
                                name: string | null;
                                /** @enum {unknown} */
                                object: "assistant";
                                system_prompt_overwrite?: string | null;
                                temperature?: number | null;
                                tool_resources?: ({
                                    code_interpreter?: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                    file_search?: {
                                        /** @description The vector_store attached to this object. */
                                        vector_store_ids?: string[];
                                    };
                                } & {
                                    [key: string]: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                }) | null;
                                tools: ({
                                    /** @enum {unknown} */
                                    type: "user";
                                    user: {
                                        tool: {
                                            id: string;
                                        };
                                    };
                                } | {
                                    function: {
                                        description?: string;
                                        name: string;
                                        parameters?: {
                                            [key: string]: unknown;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    type: "function";
                                } | {
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    file_search?: {
                                        /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                         *
                                         *     Note that the file search tool may output fewer than `max_num_results` results. */
                                        max_num_results?: number;
                                    };
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    system: {
                                        /** @enum {string} */
                                        id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                    };
                                    /** @enum {unknown} */
                                    type: "system";
                                })[];
                                top_p?: number | null;
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @default bee
                         * @enum {string}
                         */
                        agent?: "bee" | "streamlit";
                        description?: string | null;
                        instructions?: string | null;
                        metadata?: {
                            [key: string]: string;
                        };
                        model?: string;
                        name?: string | null;
                        system_prompt_overwrite?: string | null;
                        temperature?: number | null;
                        tool_resources?: ({
                            code_interpreter?: {
                                /** @default [] */
                                file_ids?: string[];
                            };
                            file_search?: {
                                /** @description The vector_store attached to this object. */
                                vector_store_ids?: string[];
                            };
                        } & {
                            [key: string]: {
                                /** @default [] */
                                file_ids?: string[];
                            };
                        }) | null;
                        /** @default [] */
                        tools?: ({
                            /** @enum {unknown} */
                            type: "user";
                            user: {
                                tool: {
                                    id: string;
                                };
                            };
                        } | {
                            function: {
                                description?: string;
                                name: string;
                                parameters?: {
                                    [key: string]: unknown;
                                };
                            };
                            /** @enum {unknown} */
                            type: "function";
                        } | {
                            /** @enum {unknown} */
                            type: "code_interpreter";
                        } | {
                            file_search?: {
                                /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                 *
                                 *     Note that the file search tool may output fewer than `max_num_results` results. */
                                max_num_results?: number;
                            };
                            /** @enum {unknown} */
                            type: "file_search";
                        } | {
                            system: {
                                /** @enum {string} */
                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                            };
                            /** @enum {unknown} */
                            type: "system";
                        })[];
                        top_p?: number | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            agent: "bee" | "streamlit";
                            created_at: number;
                            description: string | null;
                            id: string;
                            instructions: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            name: string | null;
                            /** @enum {unknown} */
                            object: "assistant";
                            system_prompt_overwrite?: string | null;
                            temperature?: number | null;
                            tool_resources?: ({
                                code_interpreter?: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                                file_search?: {
                                    /** @description The vector_store attached to this object. */
                                    vector_store_ids?: string[];
                                };
                            } & {
                                [key: string]: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                            }) | null;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/assistants/{assistant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assistant_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            agent: "bee" | "streamlit";
                            created_at: number;
                            description: string | null;
                            id: string;
                            instructions: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            name: string | null;
                            /** @enum {unknown} */
                            object: "assistant";
                            system_prompt_overwrite?: string | null;
                            temperature?: number | null;
                            tool_resources?: ({
                                code_interpreter?: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                                file_search?: {
                                    /** @description The vector_store attached to this object. */
                                    vector_store_ids?: string[];
                                };
                            } & {
                                [key: string]: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                            }) | null;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assistant_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        description?: string | null;
                        instructions?: string | null;
                        metadata?: {
                            [key: string]: string;
                        };
                        model?: string;
                        name?: string | null;
                        system_prompt_overwrite?: string | null;
                        temperature?: number | null;
                        tool_resources?: ({
                            code_interpreter?: {
                                /** @default [] */
                                file_ids?: string[];
                            };
                            file_search?: {
                                /** @description The vector_store attached to this object. */
                                vector_store_ids?: string[];
                            };
                        } & {
                            [key: string]: {
                                /** @default [] */
                                file_ids?: string[];
                            };
                        }) | null;
                        tools?: ({
                            /** @enum {unknown} */
                            type: "user";
                            user: {
                                tool: {
                                    id: string;
                                };
                            };
                        } | {
                            function: {
                                description?: string;
                                name: string;
                                parameters?: {
                                    [key: string]: unknown;
                                };
                            };
                            /** @enum {unknown} */
                            type: "function";
                        } | {
                            /** @enum {unknown} */
                            type: "code_interpreter";
                        } | {
                            file_search?: {
                                /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                 *
                                 *     Note that the file search tool may output fewer than `max_num_results` results. */
                                max_num_results?: number;
                            };
                            /** @enum {unknown} */
                            type: "file_search";
                        } | {
                            system: {
                                /** @enum {string} */
                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                            };
                            /** @enum {unknown} */
                            type: "system";
                        })[];
                        top_p?: number | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            agent: "bee" | "streamlit";
                            created_at: number;
                            description: string | null;
                            id: string;
                            instructions: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            name: string | null;
                            /** @enum {unknown} */
                            object: "assistant";
                            system_prompt_overwrite?: string | null;
                            temperature?: number | null;
                            tool_resources?: ({
                                code_interpreter?: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                                file_search?: {
                                    /** @description The vector_store attached to this object. */
                                    vector_store_ids?: string[];
                                };
                            } & {
                                [key: string]: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                            }) | null;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assistant_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "assistant.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        messages: ({
                            content: string;
                            /** @enum {unknown} */
                            role: "system";
                        } | {
                            content: string;
                            /** @enum {unknown} */
                            role: "user";
                        } | {
                            content: string;
                            /** @enum {unknown} */
                            role: "assistant";
                        })[];
                        model?: string;
                        response_format?: {
                            json_schema: {
                                schema: {
                                    [key: string]: unknown;
                                };
                            };
                            /** @enum {unknown} */
                            type: "json_schema";
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            choices: {
                                index: number;
                                message: {
                                    content: string;
                                    /** @enum {unknown} */
                                    role: "assistant";
                                };
                            }[];
                            created: number;
                            id: string;
                            model: string;
                            /** @enum {unknown} */
                            object: "chat.completion";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    "ids[]"?: string[];
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at" | "filename";
                    show_dependent?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                bytes: number;
                                created_at: number;
                                depends_on?: {
                                    thread: {
                                        id: string;
                                    };
                                };
                                filename: string;
                                id: string;
                                /** @enum {unknown} */
                                object: "file";
                                /** @enum {string} */
                                purpose: "assistants" | "assistants_output";
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        depends_on_thread_id?: string;
                        /** Format: binary */
                        file: string;
                        /** @enum {string} */
                        purpose: "assistants";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            bytes: number;
                            created_at: number;
                            depends_on?: {
                                thread: {
                                    id: string;
                                };
                            };
                            filename: string;
                            id: string;
                            /** @enum {unknown} */
                            object: "file";
                            /** @enum {string} */
                            purpose: "assistants" | "assistants_output";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    file_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            bytes: number;
                            created_at: number;
                            depends_on?: {
                                thread: {
                                    id: string;
                                };
                            };
                            filename: string;
                            id: string;
                            /** @enum {unknown} */
                            object: "file";
                            /** @enum {string} */
                            purpose: "assistants" | "assistants_output";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    file_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "file.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files/{file_id}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    file_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            "application/octet-stream"?: unknown;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/api_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at" | "name";
                    search?: string | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                created_at: number;
                                id: string;
                                last_used_at: number | null;
                                name: string;
                                /** @enum {unknown} */
                                object: "organization.project.api_key";
                                owner: {
                                    service_account?: unknown;
                                    /** @enum {string} */
                                    type: "user" | "service_account";
                                    user?: {
                                        added_at: number;
                                        email: string;
                                        id: string;
                                        name: string;
                                        /** @enum {unknown} */
                                        object: "organization.project.user";
                                        /** @enum {string} */
                                        role: "admin" | "writer" | "reader";
                                    };
                                };
                                project: {
                                    archived_at: number | null;
                                    created_at: number;
                                    id: string;
                                    name: string;
                                    /** @enum {unknown} */
                                    object: "organization.project";
                                    /** @enum {string} */
                                    status: "active" | "archived";
                                    /** @enum {string} */
                                    visibility: "public" | "private";
                                };
                                secret: string;
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    include_archived?: boolean;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                archived_at: number | null;
                                created_at: number;
                                id: string;
                                name: string;
                                /** @enum {unknown} */
                                object: "organization.project";
                                /** @enum {string} */
                                status: "active" | "archived";
                                /** @enum {string} */
                                visibility: "public" | "private";
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                        /**
                         * @default public
                         * @enum {string}
                         */
                        visibility?: "public" | "private";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            archived_at: number | null;
                            created_at: number;
                            id: string;
                            name: string;
                            /** @enum {unknown} */
                            object: "organization.project";
                            /** @enum {string} */
                            status: "active" | "archived";
                            /** @enum {string} */
                            visibility: "public" | "private";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            archived_at: number | null;
                            created_at: number;
                            id: string;
                            name: string;
                            /** @enum {unknown} */
                            object: "organization.project";
                            /** @enum {string} */
                            status: "active" | "archived";
                            /** @enum {string} */
                            visibility: "public" | "private";
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                        /** @enum {string} */
                        visibility?: "public" | "private";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            name?: string;
                            /** @enum {string} */
                            visibility?: "public" | "private";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/projects/{project_id}/api_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at";
                };
                header?: never;
                path: {
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                created_at: number;
                                id: string;
                                last_used_at: number | null;
                                name: string;
                                /** @enum {unknown} */
                                object: "organization.project.api_key";
                                owner: {
                                    service_account?: unknown;
                                    /** @enum {string} */
                                    type: "user" | "service_account";
                                    user?: {
                                        added_at: number;
                                        email: string;
                                        id: string;
                                        name: string;
                                        /** @enum {unknown} */
                                        object: "organization.project.user";
                                        /** @enum {string} */
                                        role: "admin" | "writer" | "reader";
                                    };
                                };
                                project: {
                                    archived_at: number | null;
                                    created_at: number;
                                    id: string;
                                    name: string;
                                    /** @enum {unknown} */
                                    object: "organization.project";
                                    /** @enum {string} */
                                    status: "active" | "archived";
                                    /** @enum {string} */
                                    visibility: "public" | "private";
                                };
                                secret: string;
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            id: string;
                            last_used_at: number | null;
                            name: string;
                            /** @enum {unknown} */
                            object: "organization.project.api_key";
                            owner: {
                                service_account?: unknown;
                                /** @enum {string} */
                                type: "user" | "service_account";
                                user?: {
                                    added_at: number;
                                    email: string;
                                    id: string;
                                    name: string;
                                    /** @enum {unknown} */
                                    object: "organization.project.user";
                                    /** @enum {string} */
                                    role: "admin" | "writer" | "reader";
                                };
                            };
                            project: {
                                archived_at: number | null;
                                created_at: number;
                                id: string;
                                name: string;
                                /** @enum {unknown} */
                                object: "organization.project";
                                /** @enum {string} */
                                status: "active" | "archived";
                                /** @enum {string} */
                                visibility: "public" | "private";
                            };
                            secret: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/projects/{project_id}/api_keys/{api_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    api_key_id: string;
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            id: string;
                            last_used_at: number | null;
                            name: string;
                            /** @enum {unknown} */
                            object: "organization.project.api_key";
                            owner: {
                                service_account?: unknown;
                                /** @enum {string} */
                                type: "user" | "service_account";
                                user?: {
                                    added_at: number;
                                    email: string;
                                    id: string;
                                    name: string;
                                    /** @enum {unknown} */
                                    object: "organization.project.user";
                                    /** @enum {string} */
                                    role: "admin" | "writer" | "reader";
                                };
                            };
                            project: {
                                archived_at: number | null;
                                created_at: number;
                                id: string;
                                name: string;
                                /** @enum {unknown} */
                                object: "organization.project";
                                /** @enum {string} */
                                status: "active" | "archived";
                                /** @enum {string} */
                                visibility: "public" | "private";
                            };
                            secret: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    api_key_id: string;
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            id: string;
                            last_used_at: number | null;
                            name: string;
                            /** @enum {unknown} */
                            object: "organization.project.api_key";
                            owner: {
                                service_account?: unknown;
                                /** @enum {string} */
                                type: "user" | "service_account";
                                user?: {
                                    added_at: number;
                                    email: string;
                                    id: string;
                                    name: string;
                                    /** @enum {unknown} */
                                    object: "organization.project.user";
                                    /** @enum {string} */
                                    role: "admin" | "writer" | "reader";
                                };
                            };
                            project: {
                                archived_at: number | null;
                                created_at: number;
                                id: string;
                                name: string;
                                /** @enum {unknown} */
                                object: "organization.project";
                                /** @enum {string} */
                                status: "active" | "archived";
                                /** @enum {string} */
                                visibility: "public" | "private";
                            };
                            secret: string;
                        };
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    api_key_id: string;
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "organization.project.api_key.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/projects/{project_id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            archived_at: number | null;
                            created_at: number;
                            id: string;
                            name: string;
                            /** @enum {unknown} */
                            object: "organization.project";
                            /** @enum {string} */
                            status: "active" | "archived";
                            /** @enum {string} */
                            visibility: "public" | "private";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/projects/{project_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at";
                    search?: string | null;
                };
                header?: never;
                path: {
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                added_at: number;
                                email: string;
                                id: string;
                                name: string;
                                /** @enum {unknown} */
                                object: "organization.project.user";
                                /** @enum {string} */
                                role: "admin" | "writer" | "reader";
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    project_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        role: "admin" | "writer" | "reader";
                        user_id: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            added_at: number;
                            email: string;
                            id: string;
                            name: string;
                            /** @enum {unknown} */
                            object: "organization.project.user";
                            /** @enum {string} */
                            role: "admin" | "writer" | "reader";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/projects/{project_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    project_id: string;
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            added_at: number;
                            email: string;
                            id: string;
                            name: string;
                            /** @enum {unknown} */
                            object: "organization.project.user";
                            /** @enum {string} */
                            role: "admin" | "writer" | "reader";
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    project_id: string;
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        role?: "admin" | "writer" | "reader";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            added_at: number;
                            email: string;
                            id: string;
                            name: string;
                            /** @enum {unknown} */
                            object: "organization.project.user";
                            /** @enum {string} */
                            role: "admin" | "writer" | "reader";
                        };
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    project_id: string;
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "project-user.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at";
                    search?: string | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                added_at: number;
                                email: string;
                                id: string;
                                name: string;
                                /** @enum {unknown} */
                                object: "organization.user";
                                /** @enum {string} */
                                role: "owner" | "member";
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread";
                                tool_resources?: ({
                                    code_interpreter?: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                    file_search?: {
                                        /** @description The vector_store attached to this object. */
                                        vector_store_ids?: string[];
                                    };
                                } & {
                                    [key: string]: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                }) | null;
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        messages?: {
                            attachments?: {
                                file_id: string;
                                tools?: ({
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "system";
                                } | {
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "user";
                                })[];
                            }[] | null;
                            content: string;
                            metadata?: {
                                [key: string]: string;
                            };
                            /** @enum {string} */
                            role: "user" | "assistant";
                        }[];
                        metadata?: {
                            [key: string]: string;
                        };
                        tool_resources?: ({
                            code_interpreter?: {
                                /** @default [] */
                                file_ids?: string[];
                            };
                            file_search?: {
                                /** @description The vector_store attached to this object. */
                                vector_store_ids?: string[];
                            };
                        } & {
                            [key: string]: {
                                /** @default [] */
                                file_ids?: string[];
                            };
                        }) | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            id: string;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @enum {unknown} */
                            object: "thread";
                            tool_resources?: ({
                                code_interpreter?: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                                file_search?: {
                                    /** @description The vector_store attached to this object. */
                                    vector_store_ids?: string[];
                                };
                            } & {
                                [key: string]: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                            }) | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            id: string;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @enum {unknown} */
                            object: "thread";
                            tool_resources?: ({
                                code_interpreter?: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                                file_search?: {
                                    /** @description The vector_store attached to this object. */
                                    vector_store_ids?: string[];
                                };
                            } & {
                                [key: string]: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                            }) | null;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        metadata?: {
                            [key: string]: string;
                        };
                        tool_resources?: ({
                            code_interpreter?: {
                                /** @default [] */
                                file_ids?: string[];
                            };
                            file_search?: {
                                /** @description The vector_store attached to this object. */
                                vector_store_ids?: string[];
                            };
                        } & {
                            [key: string]: {
                                /** @default [] */
                                file_ids?: string[];
                            };
                        }) | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            id: string;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @enum {unknown} */
                            object: "thread";
                            tool_resources?: ({
                                code_interpreter?: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                                file_search?: {
                                    /** @description The vector_store attached to this object. */
                                    vector_store_ids?: string[];
                                };
                            } & {
                                [key: string]: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                            }) | null;
                        };
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "thread.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at";
                };
                header?: never;
                path: {
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                attachments?: {
                                    file_id: string;
                                    tools: ({
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "system";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                    })[];
                                }[] | null;
                                content: {
                                    text: {
                                        value: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "text";
                                }[];
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.message";
                                /** @enum {string} */
                                role: "user" | "assistant";
                                run_id?: string;
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        attachments?: {
                            file_id: string;
                            tools?: ({
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                id: string;
                                /** @enum {unknown} */
                                type: "system";
                            } | {
                                id: string;
                                /** @enum {unknown} */
                                type: "user";
                            })[];
                        }[] | null;
                        content: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** @enum {string} */
                        role: "user" | "assistant";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            attachments?: {
                                file_id: string;
                                tools: ({
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "system";
                                } | {
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "user";
                                })[];
                            }[] | null;
                            content: {
                                text: {
                                    value: string;
                                };
                                /** @enum {unknown} */
                                type: "text";
                            }[];
                            created_at: number;
                            id: string;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @enum {unknown} */
                            object: "thread.message";
                            /** @enum {string} */
                            role: "user" | "assistant";
                            run_id?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/messages/{message_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    message_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            attachments?: {
                                file_id: string;
                                tools: ({
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "system";
                                } | {
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "user";
                                })[];
                            }[] | null;
                            content: {
                                text: {
                                    value: string;
                                };
                                /** @enum {unknown} */
                                type: "text";
                            }[];
                            created_at: number;
                            id: string;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @enum {unknown} */
                            object: "thread.message";
                            /** @enum {string} */
                            role: "user" | "assistant";
                            run_id?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    message_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        metadata?: {
                            [key: string]: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            attachments?: {
                                file_id: string;
                                tools: ({
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "system";
                                } | {
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "user";
                                })[];
                            }[] | null;
                            content: {
                                text: {
                                    value: string;
                                };
                                /** @enum {unknown} */
                                type: "text";
                            }[];
                            created_at: number;
                            id: string;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @enum {unknown} */
                            object: "thread.message";
                            /** @enum {string} */
                            role: "user" | "assistant";
                            run_id?: string;
                        };
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    message_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "thread.message.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    "ids[]"?: string[];
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at";
                };
                header?: never;
                path: {
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                additional_instructions: string | null;
                                assistant_id: string;
                                cancelled_at: number | null;
                                completed_at: number | null;
                                created_at: number | null;
                                expires_at: number | null;
                                failed_at: number | null;
                                id: string;
                                instructions: string | null;
                                last_error: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                model: string;
                                /** @enum {unknown} */
                                object: "thread.run";
                                required_action: ({
                                    submit_tool_outputs: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_outputs";
                                } | {
                                    submit_tool_approvals: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_approvals";
                                }) | null;
                                started_at: number | null;
                                /** @enum {string} */
                                status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                                temperature?: number | null;
                                thread_id: string;
                                tools: ({
                                    /** @enum {unknown} */
                                    type: "user";
                                    user: {
                                        tool: {
                                            id: string;
                                        };
                                    };
                                } | {
                                    function: {
                                        description?: string;
                                        name: string;
                                        parameters?: {
                                            [key: string]: unknown;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    type: "function";
                                } | {
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    file_search?: {
                                        /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                         *
                                         *     Note that the file search tool may output fewer than `max_num_results` results. */
                                        max_num_results?: number;
                                    };
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    system: {
                                        /** @enum {string} */
                                        id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                    };
                                    /** @enum {unknown} */
                                    type: "system";
                                })[];
                                top_p?: number | null;
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        additional_instructions?: string | null;
                        assistant_id: string;
                        instructions?: string | null;
                        metadata?: {
                            [key: string]: string;
                        };
                        model?: string | null;
                        stream?: boolean | null;
                        temperature?: number | null;
                        tool_approvals?: {
                            [key: string]: {
                                /** @enum {string} */
                                require: "always" | "never";
                            };
                        } | null;
                        tools?: ({
                            /** @enum {unknown} */
                            type: "user";
                            user: {
                                tool: {
                                    id: string;
                                };
                            };
                        } | {
                            function: {
                                description?: string;
                                name: string;
                                parameters?: {
                                    [key: string]: unknown;
                                };
                            };
                            /** @enum {unknown} */
                            type: "function";
                        } | {
                            /** @enum {unknown} */
                            type: "code_interpreter";
                        } | {
                            file_search?: {
                                /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                 *
                                 *     Note that the file search tool may output fewer than `max_num_results` results. */
                                max_num_results?: number;
                            };
                            /** @enum {unknown} */
                            type: "file_search";
                        } | {
                            system: {
                                /** @enum {string} */
                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                            };
                            /** @enum {unknown} */
                            type: "system";
                        })[] | null;
                        top_p?: number | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            additional_instructions: string | null;
                            assistant_id: string;
                            cancelled_at: number | null;
                            completed_at: number | null;
                            created_at: number | null;
                            expires_at: number | null;
                            failed_at: number | null;
                            id: string;
                            instructions: string | null;
                            last_error: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            /** @enum {unknown} */
                            object: "thread.run";
                            required_action: ({
                                submit_tool_outputs: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_outputs";
                            } | {
                                submit_tool_approvals: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_approvals";
                            }) | null;
                            started_at: number | null;
                            /** @enum {string} */
                            status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                            temperature?: number | null;
                            thread_id: string;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                        "text/event-stream": {
                            data?: {
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread";
                                tool_resources?: ({
                                    code_interpreter?: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                    file_search?: {
                                        /** @description The vector_store attached to this object. */
                                        vector_store_ids?: string[];
                                    };
                                } & {
                                    [key: string]: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                }) | null;
                            };
                            /** @enum {unknown} */
                            event?: "thread.created";
                        } | {
                            data?: {
                                additional_instructions: string | null;
                                assistant_id: string;
                                cancelled_at: number | null;
                                completed_at: number | null;
                                created_at: number | null;
                                expires_at: number | null;
                                failed_at: number | null;
                                id: string;
                                instructions: string | null;
                                last_error: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                model: string;
                                /** @enum {unknown} */
                                object: "thread.run";
                                required_action: ({
                                    submit_tool_outputs: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_outputs";
                                } | {
                                    submit_tool_approvals: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_approvals";
                                }) | null;
                                started_at: number | null;
                                /** @enum {string} */
                                status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                                temperature?: number | null;
                                thread_id: string;
                                tools: ({
                                    /** @enum {unknown} */
                                    type: "user";
                                    user: {
                                        tool: {
                                            id: string;
                                        };
                                    };
                                } | {
                                    function: {
                                        description?: string;
                                        name: string;
                                        parameters?: {
                                            [key: string]: unknown;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    type: "function";
                                } | {
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    file_search?: {
                                        /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                         *
                                         *     Note that the file search tool may output fewer than `max_num_results` results. */
                                        max_num_results?: number;
                                    };
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    system: {
                                        /** @enum {string} */
                                        id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                    };
                                    /** @enum {unknown} */
                                    type: "system";
                                })[];
                                top_p?: number | null;
                            };
                            /** @enum {string} */
                            event?: "thread.run.created" | "thread.run.queued" | "thread.run.in_progress" | "thread.run.requires_action" | "thread.run.requires_approve" | "thread.run.completed" | "thread.run.incomplete" | "thread.run.failed" | "thread.run.cancelling" | "thread.run.cancelled" | "thread.run.expired";
                        } | {
                            data?: {
                                assistant_id: string;
                                created_at: number;
                                id: string;
                                last_error?: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.run.step";
                                run_id: string;
                                /** @enum {string} */
                                status?: "in_progress" | "completed" | "failed" | "cancelled";
                                step_details: {
                                    message_creation: {
                                        message_id: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "message_creation";
                                } | {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                    /** @enum {unknown} */
                                    type: "tool_calls";
                                } | {
                                    thought: {
                                        content: string | null;
                                    };
                                    /** @enum {unknown} */
                                    type: "thought";
                                };
                                thread_id: string;
                                /** @enum {string} */
                                type: "message_creation" | "tool_calls" | "thought";
                            };
                            /** @enum {string} */
                            event?: "thread.run.step.created" | "thread.run.step.in_progress" | "thread.run.step.completed" | "thread.run.step.failed" | "thread.run.step.cancelled" | "thread.run.step.expired";
                        } | {
                            data?: {
                                delta: {
                                    step_details: {
                                        message_creation: {
                                            message_id: string;
                                        };
                                        /** @enum {unknown} */
                                        type: "message_creation";
                                    } | {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    index: number;
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    index: number;
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    index: number;
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            index: number;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                        /** @enum {unknown} */
                                        type: "tool_calls";
                                    } | {
                                        thought: {
                                            content: string | null;
                                        };
                                        /** @enum {unknown} */
                                        type: "thought";
                                    };
                                };
                                id: string;
                                /** @enum {unknown} */
                                object: "thread.run.step.delta";
                            };
                            /** @enum {unknown} */
                            event?: "thread.run.step.delta";
                        } | {
                            data?: {
                                attachments?: {
                                    file_id: string;
                                    tools: ({
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "system";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                    })[];
                                }[] | null;
                                content: {
                                    text: {
                                        value: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "text";
                                }[];
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.message";
                                /** @enum {string} */
                                role: "user" | "assistant";
                                run_id?: string;
                            };
                            /** @enum {string} */
                            event?: "thread.message.created" | "thread.message.in_progress" | "thread.message.completed" | "thread.message.incomplete";
                        } | {
                            data?: {
                                delta: {
                                    content: {
                                        index: number;
                                        text: {
                                            value: string;
                                        };
                                        /** @enum {unknown} */
                                        type: "text";
                                    }[];
                                    /** @enum {string} */
                                    role: "user" | "assistant";
                                };
                                id: string;
                                /** @enum {unknown} */
                                object: "thread.message.delta";
                            };
                            /** @enum {unknown} */
                            event?: "thread.message.delta";
                        } | {
                            /** @enum {unknown} */
                            data?: "[DONE]";
                            /** @enum {unknown} */
                            event?: "done";
                        } | {
                            data?: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            };
                            /** @enum {unknown} */
                            event?: "error";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/runs/{run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    run_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            additional_instructions: string | null;
                            assistant_id: string;
                            cancelled_at: number | null;
                            completed_at: number | null;
                            created_at: number | null;
                            expires_at: number | null;
                            failed_at: number | null;
                            id: string;
                            instructions: string | null;
                            last_error: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            /** @enum {unknown} */
                            object: "thread.run";
                            required_action: ({
                                submit_tool_outputs: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_outputs";
                            } | {
                                submit_tool_approvals: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_approvals";
                            }) | null;
                            started_at: number | null;
                            /** @enum {string} */
                            status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                            temperature?: number | null;
                            thread_id: string;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    run_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        metadata?: {
                            [key: string]: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            additional_instructions: string | null;
                            assistant_id: string;
                            cancelled_at: number | null;
                            completed_at: number | null;
                            created_at: number | null;
                            expires_at: number | null;
                            failed_at: number | null;
                            id: string;
                            instructions: string | null;
                            last_error: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            /** @enum {unknown} */
                            object: "thread.run";
                            required_action: ({
                                submit_tool_outputs: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_outputs";
                            } | {
                                submit_tool_approvals: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_approvals";
                            }) | null;
                            started_at: number | null;
                            /** @enum {string} */
                            status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                            temperature?: number | null;
                            thread_id: string;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/runs/{run_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    run_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            additional_instructions: string | null;
                            assistant_id: string;
                            cancelled_at: number | null;
                            completed_at: number | null;
                            created_at: number | null;
                            expires_at: number | null;
                            failed_at: number | null;
                            id: string;
                            instructions: string | null;
                            last_error: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            /** @enum {unknown} */
                            object: "thread.run";
                            required_action: ({
                                submit_tool_outputs: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_outputs";
                            } | {
                                submit_tool_approvals: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_approvals";
                            }) | null;
                            started_at: number | null;
                            /** @enum {string} */
                            status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                            temperature?: number | null;
                            thread_id: string;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/runs/{run_id}/steps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at";
                };
                header?: never;
                path: {
                    run_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                assistant_id: string;
                                created_at: number;
                                id: string;
                                last_error?: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.run.step";
                                run_id: string;
                                /** @enum {string} */
                                status?: "in_progress" | "completed" | "failed" | "cancelled";
                                step_details: {
                                    message_creation: {
                                        message_id: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "message_creation";
                                } | {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                    /** @enum {unknown} */
                                    type: "tool_calls";
                                } | {
                                    thought: {
                                        content: string | null;
                                    };
                                    /** @enum {unknown} */
                                    type: "thought";
                                };
                                thread_id: string;
                                /** @enum {string} */
                                type: "message_creation" | "tool_calls" | "thought";
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/runs/{run_id}/steps/{step_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    run_id: string;
                    step_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            assistant_id: string;
                            created_at: number;
                            id: string;
                            last_error?: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @enum {unknown} */
                            object: "thread.run.step";
                            run_id: string;
                            /** @enum {string} */
                            status?: "in_progress" | "completed" | "failed" | "cancelled";
                            step_details: {
                                message_creation: {
                                    message_id: string;
                                };
                                /** @enum {unknown} */
                                type: "message_creation";
                            } | {
                                tool_calls: ({
                                    code_interpreter: {
                                        input: string;
                                        outputs: ({
                                            logs: string;
                                            /** @enum {unknown} */
                                            type: "logs";
                                        } | {
                                            image: {
                                                file_id: string;
                                            };
                                            /** @enum {unknown} */
                                            type: "image";
                                        } | {
                                            resource: {
                                                file_id: string;
                                            };
                                            /** @enum {unknown} */
                                            type: "resource";
                                        })[];
                                    };
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    file_search?: {
                                        input: string;
                                        output?: {
                                            content: string;
                                            source?: string;
                                        }[];
                                    };
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    function: {
                                        arguments: string;
                                        name: string;
                                        output: string | null;
                                    };
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "function";
                                } | {
                                    id: string;
                                    /** @enum {unknown} */
                                    type: "user";
                                    user: {
                                        arguments: string | null;
                                        output: string | null;
                                        tool: {
                                            id: string;
                                        };
                                    };
                                } | {
                                    id: string;
                                    system: {
                                        /** @enum {string} */
                                        id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                        input?: unknown;
                                        output?: unknown;
                                    };
                                    /** @enum {unknown} */
                                    type: "system";
                                })[];
                                /** @enum {unknown} */
                                type: "tool_calls";
                            } | {
                                thought: {
                                    content: string | null;
                                };
                                /** @enum {unknown} */
                                type: "thought";
                            };
                            thread_id: string;
                            /** @enum {string} */
                            type: "message_creation" | "tool_calls" | "thought";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/runs/{run_id}/submit_tool_approvals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    run_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        stream?: boolean | null;
                        tool_approvals: {
                            approve: boolean;
                            tool_call_id: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            additional_instructions: string | null;
                            assistant_id: string;
                            cancelled_at: number | null;
                            completed_at: number | null;
                            created_at: number | null;
                            expires_at: number | null;
                            failed_at: number | null;
                            id: string;
                            instructions: string | null;
                            last_error: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            /** @enum {unknown} */
                            object: "thread.run";
                            required_action: ({
                                submit_tool_outputs: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_outputs";
                            } | {
                                submit_tool_approvals: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_approvals";
                            }) | null;
                            started_at: number | null;
                            /** @enum {string} */
                            status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                            temperature?: number | null;
                            thread_id: string;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                        "text/event-stream": {
                            data?: {
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread";
                                tool_resources?: ({
                                    code_interpreter?: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                    file_search?: {
                                        /** @description The vector_store attached to this object. */
                                        vector_store_ids?: string[];
                                    };
                                } & {
                                    [key: string]: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                }) | null;
                            };
                            /** @enum {unknown} */
                            event?: "thread.created";
                        } | {
                            data?: {
                                additional_instructions: string | null;
                                assistant_id: string;
                                cancelled_at: number | null;
                                completed_at: number | null;
                                created_at: number | null;
                                expires_at: number | null;
                                failed_at: number | null;
                                id: string;
                                instructions: string | null;
                                last_error: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                model: string;
                                /** @enum {unknown} */
                                object: "thread.run";
                                required_action: ({
                                    submit_tool_outputs: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_outputs";
                                } | {
                                    submit_tool_approvals: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_approvals";
                                }) | null;
                                started_at: number | null;
                                /** @enum {string} */
                                status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                                temperature?: number | null;
                                thread_id: string;
                                tools: ({
                                    /** @enum {unknown} */
                                    type: "user";
                                    user: {
                                        tool: {
                                            id: string;
                                        };
                                    };
                                } | {
                                    function: {
                                        description?: string;
                                        name: string;
                                        parameters?: {
                                            [key: string]: unknown;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    type: "function";
                                } | {
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    file_search?: {
                                        /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                         *
                                         *     Note that the file search tool may output fewer than `max_num_results` results. */
                                        max_num_results?: number;
                                    };
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    system: {
                                        /** @enum {string} */
                                        id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                    };
                                    /** @enum {unknown} */
                                    type: "system";
                                })[];
                                top_p?: number | null;
                            };
                            /** @enum {string} */
                            event?: "thread.run.created" | "thread.run.queued" | "thread.run.in_progress" | "thread.run.requires_action" | "thread.run.requires_approve" | "thread.run.completed" | "thread.run.incomplete" | "thread.run.failed" | "thread.run.cancelling" | "thread.run.cancelled" | "thread.run.expired";
                        } | {
                            data?: {
                                assistant_id: string;
                                created_at: number;
                                id: string;
                                last_error?: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.run.step";
                                run_id: string;
                                /** @enum {string} */
                                status?: "in_progress" | "completed" | "failed" | "cancelled";
                                step_details: {
                                    message_creation: {
                                        message_id: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "message_creation";
                                } | {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                    /** @enum {unknown} */
                                    type: "tool_calls";
                                } | {
                                    thought: {
                                        content: string | null;
                                    };
                                    /** @enum {unknown} */
                                    type: "thought";
                                };
                                thread_id: string;
                                /** @enum {string} */
                                type: "message_creation" | "tool_calls" | "thought";
                            };
                            /** @enum {string} */
                            event?: "thread.run.step.created" | "thread.run.step.in_progress" | "thread.run.step.completed" | "thread.run.step.failed" | "thread.run.step.cancelled" | "thread.run.step.expired";
                        } | {
                            data?: {
                                delta: {
                                    step_details: {
                                        message_creation: {
                                            message_id: string;
                                        };
                                        /** @enum {unknown} */
                                        type: "message_creation";
                                    } | {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    index: number;
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    index: number;
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    index: number;
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            index: number;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                        /** @enum {unknown} */
                                        type: "tool_calls";
                                    } | {
                                        thought: {
                                            content: string | null;
                                        };
                                        /** @enum {unknown} */
                                        type: "thought";
                                    };
                                };
                                id: string;
                                /** @enum {unknown} */
                                object: "thread.run.step.delta";
                            };
                            /** @enum {unknown} */
                            event?: "thread.run.step.delta";
                        } | {
                            data?: {
                                attachments?: {
                                    file_id: string;
                                    tools: ({
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "system";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                    })[];
                                }[] | null;
                                content: {
                                    text: {
                                        value: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "text";
                                }[];
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.message";
                                /** @enum {string} */
                                role: "user" | "assistant";
                                run_id?: string;
                            };
                            /** @enum {string} */
                            event?: "thread.message.created" | "thread.message.in_progress" | "thread.message.completed" | "thread.message.incomplete";
                        } | {
                            data?: {
                                delta: {
                                    content: {
                                        index: number;
                                        text: {
                                            value: string;
                                        };
                                        /** @enum {unknown} */
                                        type: "text";
                                    }[];
                                    /** @enum {string} */
                                    role: "user" | "assistant";
                                };
                                id: string;
                                /** @enum {unknown} */
                                object: "thread.message.delta";
                            };
                            /** @enum {unknown} */
                            event?: "thread.message.delta";
                        } | {
                            /** @enum {unknown} */
                            data?: "[DONE]";
                            /** @enum {unknown} */
                            event?: "done";
                        } | {
                            data?: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            };
                            /** @enum {unknown} */
                            event?: "error";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    run_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        stream?: boolean | null;
                        tool_outputs: {
                            output: string;
                            tool_call_id: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            additional_instructions: string | null;
                            assistant_id: string;
                            cancelled_at: number | null;
                            completed_at: number | null;
                            created_at: number | null;
                            expires_at: number | null;
                            failed_at: number | null;
                            id: string;
                            instructions: string | null;
                            last_error: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            /** @enum {unknown} */
                            object: "thread.run";
                            required_action: ({
                                submit_tool_outputs: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_outputs";
                            } | {
                                submit_tool_approvals: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_approvals";
                            }) | null;
                            started_at: number | null;
                            /** @enum {string} */
                            status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                            temperature?: number | null;
                            thread_id: string;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                        "text/event-stream": {
                            data?: {
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread";
                                tool_resources?: ({
                                    code_interpreter?: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                    file_search?: {
                                        /** @description The vector_store attached to this object. */
                                        vector_store_ids?: string[];
                                    };
                                } & {
                                    [key: string]: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                }) | null;
                            };
                            /** @enum {unknown} */
                            event?: "thread.created";
                        } | {
                            data?: {
                                additional_instructions: string | null;
                                assistant_id: string;
                                cancelled_at: number | null;
                                completed_at: number | null;
                                created_at: number | null;
                                expires_at: number | null;
                                failed_at: number | null;
                                id: string;
                                instructions: string | null;
                                last_error: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                model: string;
                                /** @enum {unknown} */
                                object: "thread.run";
                                required_action: ({
                                    submit_tool_outputs: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_outputs";
                                } | {
                                    submit_tool_approvals: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_approvals";
                                }) | null;
                                started_at: number | null;
                                /** @enum {string} */
                                status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                                temperature?: number | null;
                                thread_id: string;
                                tools: ({
                                    /** @enum {unknown} */
                                    type: "user";
                                    user: {
                                        tool: {
                                            id: string;
                                        };
                                    };
                                } | {
                                    function: {
                                        description?: string;
                                        name: string;
                                        parameters?: {
                                            [key: string]: unknown;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    type: "function";
                                } | {
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    file_search?: {
                                        /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                         *
                                         *     Note that the file search tool may output fewer than `max_num_results` results. */
                                        max_num_results?: number;
                                    };
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    system: {
                                        /** @enum {string} */
                                        id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                    };
                                    /** @enum {unknown} */
                                    type: "system";
                                })[];
                                top_p?: number | null;
                            };
                            /** @enum {string} */
                            event?: "thread.run.created" | "thread.run.queued" | "thread.run.in_progress" | "thread.run.requires_action" | "thread.run.requires_approve" | "thread.run.completed" | "thread.run.incomplete" | "thread.run.failed" | "thread.run.cancelling" | "thread.run.cancelled" | "thread.run.expired";
                        } | {
                            data?: {
                                assistant_id: string;
                                created_at: number;
                                id: string;
                                last_error?: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.run.step";
                                run_id: string;
                                /** @enum {string} */
                                status?: "in_progress" | "completed" | "failed" | "cancelled";
                                step_details: {
                                    message_creation: {
                                        message_id: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "message_creation";
                                } | {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                    /** @enum {unknown} */
                                    type: "tool_calls";
                                } | {
                                    thought: {
                                        content: string | null;
                                    };
                                    /** @enum {unknown} */
                                    type: "thought";
                                };
                                thread_id: string;
                                /** @enum {string} */
                                type: "message_creation" | "tool_calls" | "thought";
                            };
                            /** @enum {string} */
                            event?: "thread.run.step.created" | "thread.run.step.in_progress" | "thread.run.step.completed" | "thread.run.step.failed" | "thread.run.step.cancelled" | "thread.run.step.expired";
                        } | {
                            data?: {
                                delta: {
                                    step_details: {
                                        message_creation: {
                                            message_id: string;
                                        };
                                        /** @enum {unknown} */
                                        type: "message_creation";
                                    } | {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    index: number;
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    index: number;
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    index: number;
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            index: number;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                        /** @enum {unknown} */
                                        type: "tool_calls";
                                    } | {
                                        thought: {
                                            content: string | null;
                                        };
                                        /** @enum {unknown} */
                                        type: "thought";
                                    };
                                };
                                id: string;
                                /** @enum {unknown} */
                                object: "thread.run.step.delta";
                            };
                            /** @enum {unknown} */
                            event?: "thread.run.step.delta";
                        } | {
                            data?: {
                                attachments?: {
                                    file_id: string;
                                    tools: ({
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "system";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                    })[];
                                }[] | null;
                                content: {
                                    text: {
                                        value: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "text";
                                }[];
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.message";
                                /** @enum {string} */
                                role: "user" | "assistant";
                                run_id?: string;
                            };
                            /** @enum {string} */
                            event?: "thread.message.created" | "thread.message.in_progress" | "thread.message.completed" | "thread.message.incomplete";
                        } | {
                            data?: {
                                delta: {
                                    content: {
                                        index: number;
                                        text: {
                                            value: string;
                                        };
                                        /** @enum {unknown} */
                                        type: "text";
                                    }[];
                                    /** @enum {string} */
                                    role: "user" | "assistant";
                                };
                                id: string;
                                /** @enum {unknown} */
                                object: "thread.message.delta";
                            };
                            /** @enum {unknown} */
                            event?: "thread.message.delta";
                        } | {
                            /** @enum {unknown} */
                            data?: "[DONE]";
                            /** @enum {unknown} */
                            event?: "done";
                        } | {
                            data?: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            };
                            /** @enum {unknown} */
                            event?: "error";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/{thread_id}/runs/{run_id}/trace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    run_id: string;
                    thread_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            iterations: {
                                event: {
                                    group_id: string;
                                };
                                id: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/threads/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        assistant_id: string;
                        model?: string | null;
                        stream?: boolean | null;
                        temperature?: number | null;
                        thread?: {
                            messages?: {
                                attachments?: {
                                    file_id: string;
                                    tools?: ({
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "system";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                    })[];
                                }[] | null;
                                content: string;
                                metadata?: {
                                    [key: string]: string;
                                };
                                /** @enum {string} */
                                role: "user" | "assistant";
                            }[];
                            metadata?: {
                                [key: string]: string;
                            };
                            tool_resources?: ({
                                code_interpreter?: {
                                    /** @default [] */
                                    file_ids?: string[];
                                };
                                file_search?: {
                                    /** @description The vector_store attached to this object. */
                                    vector_store_ids?: string[];
                                };
                            } & {
                                [key: string]: {
                                    /** @default [] */
                                    file_ids?: string[];
                                };
                            }) | null;
                        };
                        tool_approvals?: {
                            [key: string]: {
                                /** @enum {string} */
                                require: "always" | "never";
                            };
                        } | null;
                        tools?: ({
                            /** @enum {unknown} */
                            type: "user";
                            user: {
                                tool: {
                                    id: string;
                                };
                            };
                        } | {
                            function: {
                                description?: string;
                                name: string;
                                parameters?: {
                                    [key: string]: unknown;
                                };
                            };
                            /** @enum {unknown} */
                            type: "function";
                        } | {
                            /** @enum {unknown} */
                            type: "code_interpreter";
                        } | {
                            file_search?: {
                                /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                 *
                                 *     Note that the file search tool may output fewer than `max_num_results` results. */
                                max_num_results?: number;
                            };
                            /** @enum {unknown} */
                            type: "file_search";
                        } | {
                            system: {
                                /** @enum {string} */
                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                            };
                            /** @enum {unknown} */
                            type: "system";
                        })[] | null;
                        top_p?: number | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            additional_instructions: string | null;
                            assistant_id: string;
                            cancelled_at: number | null;
                            completed_at: number | null;
                            created_at: number | null;
                            expires_at: number | null;
                            failed_at: number | null;
                            id: string;
                            instructions: string | null;
                            last_error: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            /** @enum {unknown} */
                            object: "thread.run";
                            required_action: ({
                                submit_tool_outputs: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_outputs";
                            } | {
                                submit_tool_approvals: {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                };
                                /** @enum {unknown} */
                                type: "submit_tool_approvals";
                            }) | null;
                            started_at: number | null;
                            /** @enum {string} */
                            status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                            temperature?: number | null;
                            thread_id: string;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        };
                        "text/event-stream": {
                            data?: {
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread";
                                tool_resources?: ({
                                    code_interpreter?: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                    file_search?: {
                                        /** @description The vector_store attached to this object. */
                                        vector_store_ids?: string[];
                                    };
                                } & {
                                    [key: string]: {
                                        /** @default [] */
                                        file_ids: string[];
                                    };
                                }) | null;
                            };
                            /** @enum {unknown} */
                            event?: "thread.created";
                        } | {
                            data?: {
                                additional_instructions: string | null;
                                assistant_id: string;
                                cancelled_at: number | null;
                                completed_at: number | null;
                                created_at: number | null;
                                expires_at: number | null;
                                failed_at: number | null;
                                id: string;
                                instructions: string | null;
                                last_error: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                model: string;
                                /** @enum {unknown} */
                                object: "thread.run";
                                required_action: ({
                                    submit_tool_outputs: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_outputs";
                                } | {
                                    submit_tool_approvals: {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            file_search?: {
                                                input: string;
                                                output?: {
                                                    content: string;
                                                    source?: string;
                                                }[];
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                    };
                                    /** @enum {unknown} */
                                    type: "submit_tool_approvals";
                                }) | null;
                                started_at: number | null;
                                /** @enum {string} */
                                status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
                                temperature?: number | null;
                                thread_id: string;
                                tools: ({
                                    /** @enum {unknown} */
                                    type: "user";
                                    user: {
                                        tool: {
                                            id: string;
                                        };
                                    };
                                } | {
                                    function: {
                                        description?: string;
                                        name: string;
                                        parameters?: {
                                            [key: string]: unknown;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    type: "function";
                                } | {
                                    /** @enum {unknown} */
                                    type: "code_interpreter";
                                } | {
                                    file_search?: {
                                        /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                         *
                                         *     Note that the file search tool may output fewer than `max_num_results` results. */
                                        max_num_results?: number;
                                    };
                                    /** @enum {unknown} */
                                    type: "file_search";
                                } | {
                                    system: {
                                        /** @enum {string} */
                                        id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                    };
                                    /** @enum {unknown} */
                                    type: "system";
                                })[];
                                top_p?: number | null;
                            };
                            /** @enum {string} */
                            event?: "thread.run.created" | "thread.run.queued" | "thread.run.in_progress" | "thread.run.requires_action" | "thread.run.requires_approve" | "thread.run.completed" | "thread.run.incomplete" | "thread.run.failed" | "thread.run.cancelling" | "thread.run.cancelled" | "thread.run.expired";
                        } | {
                            data?: {
                                assistant_id: string;
                                created_at: number;
                                id: string;
                                last_error?: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.run.step";
                                run_id: string;
                                /** @enum {string} */
                                status?: "in_progress" | "completed" | "failed" | "cancelled";
                                step_details: {
                                    message_creation: {
                                        message_id: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "message_creation";
                                } | {
                                    tool_calls: ({
                                        code_interpreter: {
                                            input: string;
                                            outputs: ({
                                                logs: string;
                                                /** @enum {unknown} */
                                                type: "logs";
                                            } | {
                                                image: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "image";
                                            } | {
                                                resource: {
                                                    file_id: string;
                                                };
                                                /** @enum {unknown} */
                                                type: "resource";
                                            })[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        file_search?: {
                                            input: string;
                                            output?: {
                                                content: string;
                                                source?: string;
                                            }[];
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        function: {
                                            arguments: string;
                                            name: string;
                                            output: string | null;
                                        };
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "function";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                        user: {
                                            arguments: string | null;
                                            output: string | null;
                                            tool: {
                                                id: string;
                                            };
                                        };
                                    } | {
                                        id: string;
                                        system: {
                                            /** @enum {string} */
                                            id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                            input?: unknown;
                                            output?: unknown;
                                        };
                                        /** @enum {unknown} */
                                        type: "system";
                                    })[];
                                    /** @enum {unknown} */
                                    type: "tool_calls";
                                } | {
                                    thought: {
                                        content: string | null;
                                    };
                                    /** @enum {unknown} */
                                    type: "thought";
                                };
                                thread_id: string;
                                /** @enum {string} */
                                type: "message_creation" | "tool_calls" | "thought";
                            };
                            /** @enum {string} */
                            event?: "thread.run.step.created" | "thread.run.step.in_progress" | "thread.run.step.completed" | "thread.run.step.failed" | "thread.run.step.cancelled" | "thread.run.step.expired";
                        } | {
                            data?: {
                                delta: {
                                    step_details: {
                                        message_creation: {
                                            message_id: string;
                                        };
                                        /** @enum {unknown} */
                                        type: "message_creation";
                                    } | {
                                        tool_calls: ({
                                            code_interpreter: {
                                                input: string;
                                                outputs: ({
                                                    index: number;
                                                    logs: string;
                                                    /** @enum {unknown} */
                                                    type: "logs";
                                                } | {
                                                    image: {
                                                        file_id: string;
                                                    };
                                                    index: number;
                                                    /** @enum {unknown} */
                                                    type: "image";
                                                } | {
                                                    index: number;
                                                    resource: {
                                                        file_id: string;
                                                    };
                                                    /** @enum {unknown} */
                                                    type: "resource";
                                                })[];
                                            };
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "code_interpreter";
                                        } | {
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "file_search";
                                        } | {
                                            function: {
                                                arguments: string;
                                                name: string;
                                                output: string | null;
                                            };
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "function";
                                        } | {
                                            id: string;
                                            index: number;
                                            /** @enum {unknown} */
                                            type: "user";
                                            user: {
                                                arguments: string | null;
                                                output: string | null;
                                                tool: {
                                                    id: string;
                                                };
                                            };
                                        } | {
                                            id: string;
                                            index: number;
                                            system: {
                                                /** @enum {string} */
                                                id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                                input?: unknown;
                                                output?: unknown;
                                            };
                                            /** @enum {unknown} */
                                            type: "system";
                                        })[];
                                        /** @enum {unknown} */
                                        type: "tool_calls";
                                    } | {
                                        thought: {
                                            content: string | null;
                                        };
                                        /** @enum {unknown} */
                                        type: "thought";
                                    };
                                };
                                id: string;
                                /** @enum {unknown} */
                                object: "thread.run.step.delta";
                            };
                            /** @enum {unknown} */
                            event?: "thread.run.step.delta";
                        } | {
                            data?: {
                                attachments?: {
                                    file_id: string;
                                    tools: ({
                                        /** @enum {unknown} */
                                        type: "code_interpreter";
                                    } | {
                                        /** @enum {unknown} */
                                        type: "file_search";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "system";
                                    } | {
                                        id: string;
                                        /** @enum {unknown} */
                                        type: "user";
                                    })[];
                                }[] | null;
                                content: {
                                    text: {
                                        value: string;
                                    };
                                    /** @enum {unknown} */
                                    type: "text";
                                }[];
                                created_at: number;
                                id: string;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @enum {unknown} */
                                object: "thread.message";
                                /** @enum {string} */
                                role: "user" | "assistant";
                                run_id?: string;
                            };
                            /** @enum {string} */
                            event?: "thread.message.created" | "thread.message.in_progress" | "thread.message.completed" | "thread.message.incomplete";
                        } | {
                            data?: {
                                delta: {
                                    content: {
                                        index: number;
                                        text: {
                                            value: string;
                                        };
                                        /** @enum {unknown} */
                                        type: "text";
                                    }[];
                                    /** @enum {string} */
                                    role: "user" | "assistant";
                                };
                                id: string;
                                /** @enum {unknown} */
                                object: "thread.message.delta";
                            };
                            /** @enum {unknown} */
                            event?: "thread.message.delta";
                        } | {
                            /** @enum {unknown} */
                            data?: "[DONE]";
                            /** @enum {unknown} */
                            event?: "done";
                        } | {
                            data?: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            };
                            /** @enum {unknown} */
                            event?: "error";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at" | "type" | "name";
                    search?: string | null;
                    type?: ("code_interpreter" | "file_search" | "function" | "user" | "system")[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                created_at: number;
                                description: string;
                                id: string;
                                is_external: boolean;
                                json_schema: string | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                name: string;
                                /** @enum {unknown} */
                                object: "tool";
                                open_api_schema: string | null;
                                source_code: string | null;
                                /** @enum {string} */
                                type: "code_interpreter" | "file_search" | "function" | "user" | "system";
                                user_description: string | null;
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        source_code: string;
                        user_description?: string;
                    } | {
                        api_key?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        open_api_schema: string;
                        user_description?: string;
                    } | {
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name: string;
                        parameters?: {
                            [key: string]: unknown;
                        };
                        user_description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            description: string;
                            id: string;
                            is_external: boolean;
                            json_schema: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            name: string;
                            /** @enum {unknown} */
                            object: "tool";
                            open_api_schema: string | null;
                            source_code: string | null;
                            /** @enum {string} */
                            type: "code_interpreter" | "file_search" | "function" | "user" | "system";
                            user_description: string | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tools/{tool_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tool_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            description: string;
                            id: string;
                            is_external: boolean;
                            json_schema: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            name: string;
                            /** @enum {unknown} */
                            object: "tool";
                            open_api_schema: string | null;
                            source_code: string | null;
                            /** @enum {string} */
                            type: "code_interpreter" | "file_search" | "function" | "user" | "system";
                            user_description: string | null;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tool_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        source_code?: string;
                        user_description?: string;
                    } | {
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        open_api_schema: string;
                        user_description?: string;
                    } | {
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        parameters?: {
                            [key: string]: unknown;
                        };
                        user_description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            created_at: number;
                            description: string;
                            id: string;
                            is_external: boolean;
                            json_schema: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            name: string;
                            /** @enum {unknown} */
                            object: "tool";
                            open_api_schema: string | null;
                            source_code: string | null;
                            /** @enum {string} */
                            type: "code_interpreter" | "file_search" | "function" | "user" | "system";
                            user_description: string | null;
                        };
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tool_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "tool.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ui/last_assistants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            agent: "bee" | "streamlit";
                            created_at: number;
                            description: string | null;
                            id: string;
                            instructions: string | null;
                            metadata: {
                                [key: string]: string;
                            };
                            model: string;
                            name: string | null;
                            /** @enum {unknown} */
                            object: "assistant";
                            system_prompt_overwrite?: string | null;
                            temperature?: number | null;
                            tool_resources?: ({
                                code_interpreter?: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                                file_search?: {
                                    /** @description The vector_store attached to this object. */
                                    vector_store_ids?: string[];
                                };
                            } & {
                                [key: string]: {
                                    /** @default [] */
                                    file_ids: string[];
                                };
                            }) | null;
                            tools: ({
                                /** @enum {unknown} */
                                type: "user";
                                user: {
                                    tool: {
                                        id: string;
                                    };
                                };
                            } | {
                                function: {
                                    description?: string;
                                    name: string;
                                    parameters?: {
                                        [key: string]: unknown;
                                    };
                                };
                                /** @enum {unknown} */
                                type: "function";
                            } | {
                                /** @enum {unknown} */
                                type: "code_interpreter";
                            } | {
                                file_search?: {
                                    /** @description The maximum number of results the file search tool should output. This number should be between 1 and 50 inclusive.
                                     *
                                     *     Note that the file search tool may output fewer than `max_num_results` results. */
                                    max_num_results?: number;
                                };
                                /** @enum {unknown} */
                                type: "file_search";
                            } | {
                                system: {
                                    /** @enum {string} */
                                    id: "web_search" | "wikipedia" | "weather" | "arxiv" | "read_file";
                                };
                                /** @enum {unknown} */
                                type: "system";
                            })[];
                            top_p?: number | null;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ui/modules_to_packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    modules: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            packages: string[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            email: string | null;
                            id: string;
                            metadata?: {
                                [key: string]: string;
                            };
                            name: string | null;
                            /** @enum {unknown} */
                            object: "user";
                        };
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        metadata?: {
                            [key: string]: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            email: string | null;
                            id: string;
                            metadata?: {
                                [key: string]: string;
                            };
                            name: string | null;
                            /** @enum {unknown} */
                            object: "user";
                        };
                    };
                };
            };
        };
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        metadata?: {
                            [key: string]: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            email: string | null;
                            id: string;
                            metadata?: {
                                [key: string]: string;
                            };
                            name: string | null;
                            /** @enum {unknown} */
                            object: "user";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vector_stores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at" | "name";
                    search?: string | null;
                    show_dependent?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                /** @description The Unix timestamp (in seconds) for when the vector store was created. */
                                created_at: number;
                                depends_on?: {
                                    thread: {
                                        id: string;
                                    };
                                };
                                /**
                                 * Vector store expiration policy
                                 * @description The expiration policy for a vector store.
                                 */
                                expires_after?: {
                                    /**
                                     * @description Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
                                     * @enum {string}
                                     */
                                    anchor: "last_active_at";
                                    /** @description The number of days after the anchor time that the vector store will expire. */
                                    days: number;
                                };
                                /** @description The Unix timestamp (in seconds) for when the vector store will expire. */
                                expires_at?: number | null;
                                file_counts: {
                                    /** @description The number of files that were cancelled. */
                                    cancelled: number;
                                    /** @description The number of files that have been successfully processed. */
                                    completed: number;
                                    /** @description The number of files that have failed to process. */
                                    failed: number;
                                    /** @description The number of files that are currently being processed. */
                                    in_progress: number;
                                    /** @description The total number of files. */
                                    total: number;
                                };
                                /** @description The identifier, which can be referenced in API endpoints. */
                                id: string;
                                /** @description The Unix timestamp (in seconds) for when the vector store was last active. */
                                last_active_at: number | null;
                                metadata: {
                                    [key: string]: string;
                                };
                                /** @description The name of the vector store. */
                                name: string;
                                /**
                                 * @description The object type, which is always `vector_store`.
                                 * @enum {string}
                                 */
                                object: "vector_store";
                                /**
                                 * @description The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
                                 * @enum {string}
                                 */
                                status: "expired" | "in_progress" | "completed";
                                /** @description The total number of bytes used by the files in the vector store. */
                                usage_bytes: number;
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. */
                        chunking_strategy?: {
                            /**
                             * @description Always `auto`.
                             * @enum {string}
                             */
                            type: "auto";
                        };
                        depends_on?: {
                            thread: {
                                id: string;
                            };
                        };
                        /**
                         * Vector store expiration policy
                         * @description The expiration policy for a vector store.
                         */
                        expires_after?: {
                            /**
                             * @description Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
                             * @enum {string}
                             */
                            anchor: "last_active_at";
                            /** @description The number of days after the anchor time that the vector store will expire. */
                            days: number;
                        };
                        /** @description A list of File IDs that the vector store should use. Useful for tools like `file_search` that can access files. */
                        file_ids?: string[];
                        metadata?: {
                            [key: string]: string;
                        };
                        /** @description The name of the vector store. */
                        name?: string;
                    };
                };
            };
            responses: {
                /** @description A vector store is a collection of processed files can be used by the `file_search` tool. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The Unix timestamp (in seconds) for when the vector store was created. */
                            created_at: number;
                            depends_on?: {
                                thread: {
                                    id: string;
                                };
                            };
                            /**
                             * Vector store expiration policy
                             * @description The expiration policy for a vector store.
                             */
                            expires_after?: {
                                /**
                                 * @description Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
                                 * @enum {string}
                                 */
                                anchor: "last_active_at";
                                /** @description The number of days after the anchor time that the vector store will expire. */
                                days: number;
                            };
                            /** @description The Unix timestamp (in seconds) for when the vector store will expire. */
                            expires_at?: number | null;
                            file_counts: {
                                /** @description The number of files that were cancelled. */
                                cancelled: number;
                                /** @description The number of files that have been successfully processed. */
                                completed: number;
                                /** @description The number of files that have failed to process. */
                                failed: number;
                                /** @description The number of files that are currently being processed. */
                                in_progress: number;
                                /** @description The total number of files. */
                                total: number;
                            };
                            /** @description The identifier, which can be referenced in API endpoints. */
                            id: string;
                            /** @description The Unix timestamp (in seconds) for when the vector store was last active. */
                            last_active_at: number | null;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @description The name of the vector store. */
                            name: string;
                            /**
                             * @description The object type, which is always `vector_store`.
                             * @enum {string}
                             */
                            object: "vector_store";
                            /**
                             * @description The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
                             * @enum {string}
                             */
                            status: "expired" | "in_progress" | "completed";
                            /** @description The total number of bytes used by the files in the vector store. */
                            usage_bytes: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vector_stores/{vector_store_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    vector_store_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A vector store is a collection of processed files can be used by the `file_search` tool. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The Unix timestamp (in seconds) for when the vector store was created. */
                            created_at: number;
                            depends_on?: {
                                thread: {
                                    id: string;
                                };
                            };
                            /**
                             * Vector store expiration policy
                             * @description The expiration policy for a vector store.
                             */
                            expires_after?: {
                                /**
                                 * @description Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
                                 * @enum {string}
                                 */
                                anchor: "last_active_at";
                                /** @description The number of days after the anchor time that the vector store will expire. */
                                days: number;
                            };
                            /** @description The Unix timestamp (in seconds) for when the vector store will expire. */
                            expires_at?: number | null;
                            file_counts: {
                                /** @description The number of files that were cancelled. */
                                cancelled: number;
                                /** @description The number of files that have been successfully processed. */
                                completed: number;
                                /** @description The number of files that have failed to process. */
                                failed: number;
                                /** @description The number of files that are currently being processed. */
                                in_progress: number;
                                /** @description The total number of files. */
                                total: number;
                            };
                            /** @description The identifier, which can be referenced in API endpoints. */
                            id: string;
                            /** @description The Unix timestamp (in seconds) for when the vector store was last active. */
                            last_active_at: number | null;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @description The name of the vector store. */
                            name: string;
                            /**
                             * @description The object type, which is always `vector_store`.
                             * @enum {string}
                             */
                            object: "vector_store";
                            /**
                             * @description The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
                             * @enum {string}
                             */
                            status: "expired" | "in_progress" | "completed";
                            /** @description The total number of bytes used by the files in the vector store. */
                            usage_bytes: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    vector_store_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * Vector store expiration policy
                         * @description The expiration policy for a vector store.
                         */
                        expires_after?: {
                            /**
                             * @description Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
                             * @enum {string}
                             */
                            anchor: "last_active_at";
                            /** @description The number of days after the anchor time that the vector store will expire. */
                            days: number;
                        } | null;
                        metadata?: {
                            [key: string]: string;
                        };
                        /** @description The name of the vector store. */
                        name?: string | null;
                    };
                };
            };
            responses: {
                /** @description A vector store is a collection of processed files can be used by the `file_search` tool. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The Unix timestamp (in seconds) for when the vector store was created. */
                            created_at: number;
                            depends_on?: {
                                thread: {
                                    id: string;
                                };
                            };
                            /**
                             * Vector store expiration policy
                             * @description The expiration policy for a vector store.
                             */
                            expires_after?: {
                                /**
                                 * @description Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
                                 * @enum {string}
                                 */
                                anchor: "last_active_at";
                                /** @description The number of days after the anchor time that the vector store will expire. */
                                days: number;
                            };
                            /** @description The Unix timestamp (in seconds) for when the vector store will expire. */
                            expires_at?: number | null;
                            file_counts: {
                                /** @description The number of files that were cancelled. */
                                cancelled: number;
                                /** @description The number of files that have been successfully processed. */
                                completed: number;
                                /** @description The number of files that have failed to process. */
                                failed: number;
                                /** @description The number of files that are currently being processed. */
                                in_progress: number;
                                /** @description The total number of files. */
                                total: number;
                            };
                            /** @description The identifier, which can be referenced in API endpoints. */
                            id: string;
                            /** @description The Unix timestamp (in seconds) for when the vector store was last active. */
                            last_active_at: number | null;
                            metadata: {
                                [key: string]: string;
                            };
                            /** @description The name of the vector store. */
                            name: string;
                            /**
                             * @description The object type, which is always `vector_store`.
                             * @enum {string}
                             */
                            object: "vector_store";
                            /**
                             * @description The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
                             * @enum {string}
                             */
                            status: "expired" | "in_progress" | "completed";
                            /** @description The total number of bytes used by the files in the vector store. */
                            usage_bytes: number;
                        };
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    vector_store_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "vector_store.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vector_stores/{vector_store_id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    after?: string;
                    before?: string;
                    limit?: number;
                    order?: "asc" | "desc";
                    order_by?: "created_at";
                };
                header?: never;
                path: {
                    vector_store_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                /** @description The strategy used to chunk the file. */
                                chunking_strategy?: {
                                    /**
                                     * @description Always `auto`.
                                     * @enum {string}
                                     */
                                    type: "auto";
                                } | {
                                    static: {
                                        /** @description The number of tokens that overlap between chunks. */
                                        chunk_overlap_tokens: number;
                                        /** @description The maximum number of tokens in each chunk. */
                                        max_chunk_size_tokens: number;
                                    };
                                    /**
                                     * @description Always `static`.
                                     * @enum {string}
                                     */
                                    type: "static";
                                };
                                /** @description The Unix timestamp (in seconds) for when the vector store file was created. */
                                created_at: number;
                                /** @description The identifier, which can be referenced in API endpoints. */
                                id: string;
                                last_error: {
                                    /** @enum {string} */
                                    code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                    message: string;
                                } | null;
                                /**
                                 * @description The object type, which is always `vector_store.file`.
                                 * @enum {string}
                                 */
                                object: "vector_store.file";
                                /**
                                 * @description The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
                                 * @enum {string}
                                 */
                                status: "in_progress" | "completed" | "failed" | "cancelled";
                                /** @description The total vector store usage in bytes. Note that this may be different from the original file size. */
                                usage_bytes: number;
                                /** @description The ID of the vector store that the file is attached to. */
                                vector_store_id: string;
                            }[];
                            first_id: string | null;
                            has_more: boolean;
                            last_id: string | null;
                            total_count: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    vector_store_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. */
                        chunking_strategy?: {
                            /**
                             * @description Always `auto`.
                             * @enum {string}
                             */
                            type: "auto";
                        };
                        /** @description A File ID that the vector store should use. Useful for tools like `file_search` that can access files. */
                        file_id: string;
                    };
                };
            };
            responses: {
                /** @description A list of files attached to a vector store. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The strategy used to chunk the file. */
                            chunking_strategy?: {
                                /**
                                 * @description Always `auto`.
                                 * @enum {string}
                                 */
                                type: "auto";
                            } | {
                                static: {
                                    /** @description The number of tokens that overlap between chunks. */
                                    chunk_overlap_tokens: number;
                                    /** @description The maximum number of tokens in each chunk. */
                                    max_chunk_size_tokens: number;
                                };
                                /**
                                 * @description Always `static`.
                                 * @enum {string}
                                 */
                                type: "static";
                            };
                            /** @description The Unix timestamp (in seconds) for when the vector store file was created. */
                            created_at: number;
                            /** @description The identifier, which can be referenced in API endpoints. */
                            id: string;
                            last_error: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            /**
                             * @description The object type, which is always `vector_store.file`.
                             * @enum {string}
                             */
                            object: "vector_store.file";
                            /**
                             * @description The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
                             * @enum {string}
                             */
                            status: "in_progress" | "completed" | "failed" | "cancelled";
                            /** @description The total vector store usage in bytes. Note that this may be different from the original file size. */
                            usage_bytes: number;
                            /** @description The ID of the vector store that the file is attached to. */
                            vector_store_id: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vector_stores/{vector_store_id}/files/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    file_id: string;
                    vector_store_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of files attached to a vector store. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The strategy used to chunk the file. */
                            chunking_strategy?: {
                                /**
                                 * @description Always `auto`.
                                 * @enum {string}
                                 */
                                type: "auto";
                            } | {
                                static: {
                                    /** @description The number of tokens that overlap between chunks. */
                                    chunk_overlap_tokens: number;
                                    /** @description The maximum number of tokens in each chunk. */
                                    max_chunk_size_tokens: number;
                                };
                                /**
                                 * @description Always `static`.
                                 * @enum {string}
                                 */
                                type: "static";
                            };
                            /** @description The Unix timestamp (in seconds) for when the vector store file was created. */
                            created_at: number;
                            /** @description The identifier, which can be referenced in API endpoints. */
                            id: string;
                            last_error: {
                                /** @enum {string} */
                                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                                message: string;
                            } | null;
                            /**
                             * @description The object type, which is always `vector_store.file`.
                             * @enum {string}
                             */
                            object: "vector_store.file";
                            /**
                             * @description The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
                             * @enum {string}
                             */
                            status: "in_progress" | "completed" | "failed" | "cancelled";
                            /** @description The total vector store usage in bytes. Note that this may be different from the original file size. */
                            usage_bytes: number;
                            /** @description The ID of the vector store that the file is attached to. */
                            vector_store_id: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    file_id: string;
                    vector_store_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default true */
                            deleted: boolean;
                            id: string;
                            /** @enum {unknown} */
                            object: "vector_store.deleted";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @enum {string} */
            code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
            message: string;
        };
        ErrorResponse: {
            error: {
                /** @enum {string} */
                code: "auth_error" | "internal_server_error" | "invalid_input" | "not_found" | "service_unavailable" | "service_error" | "too_many_requests" | "forbidden" | "framework_error" | "agent_error" | "tool_error";
                message: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
